asyncio.gather()
    принимает последовательность допускающих ожидание объектов и  запускает их конкурентно всего в одной строке кода. Если среди объектов есть сопрограмма, то gather автоматически
    обертывает ее задачей, чтобы гарантировать конкурентное выполнение. Это значит, что не нужно отдельно обертывать все сопрограммы по отдельности с
    помощью функции asyncio.create_task. Функция gather гарантирует детерминированный порядок результатов
    Недостатки: - не так легко отделить исключения
                - необходимо ждять все ответы на запросы и только после приступать к обоаботке
                – сложности со снятием задач, работавших в момент исключения.

as_completed()
    Она принимает список допускающих ожидание объектов и  возвращает итератор по будущим объектам. Эти обьекты можно перебтрать и обрабатывать по мере поступления,
    также можно задать таймаут на выполнение.
    Недостатки: - порядок абсолютно не детерминирован
                – сложности со снятием задач, работавших в момент исключения.

wait()
    Функция wait в  asyncio похожа на gather, но дает более точный
    контроль над ситуацией. У  нее есть несколько параметров, позволяющих решить, когда мы хотим получить результаты. Кроме того,
    она возвращает два множества: задачи, завершившиеся успешно или
    в результате исключения, а также задачи, которые продолжают выполняться. Если в одном из запросов возникнет исключение, то asyncio.wait
    не возбудит его, как asyncio.gather. Таким образом, у нас на выбор есть несколько способов обработать
    исключения. Можно выполнить await и дать возможность исключению распространиться выше, можно выполнить await, обернуть его
    в блок try/except, чтобы обработать исключение, или воспользоваться методами task.result() и task.exception().
    ALL_COMPLETED - проблема связана с тем что если возникнет исключение то мы будем выполнять все остальные запросы, пока wait функция не вернет все.
    FIRST_EXCEPTION - получаем два разных поведения в зависимости от того, возникает в какой-то задаче исключение или нет. Еслт исключение не возникло
        то повидение эквивалентно ALL_COMPLETED. Если исключение есть то в done будет как минимум одна задача с исключением, а все остальные будут в pending и их
        можно дальше обрабатывать
    FIRST_COMPLETED - получаем первую отработавшкю задачу(или задачу с исключением), и можем приступить к ее обработке
    timeoute=int   - есть ряд отличий по сравнению с остальными: 1. сопрограммы не снимаются, 2. исключения не возбуждаются


task.result()
task.exception()
as_completed()
wait_for()