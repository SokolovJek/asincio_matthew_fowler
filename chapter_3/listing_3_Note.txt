Резюме
В этой главе мы узнали о  блокирующих и  неблокирующих сокетах и более глубоко изучили работу цикла событий asyncio. Мы также написали свое первое приложение asyncio,
эхо-сервер с высокой степенью конкурентности. Мы поняли, как обрабатывать ошибки в задачах и добавлять собственную логику остановки приложения.

1. Мы узнали, как создать простое приложение с  блокирующими сокетами. Блокирующий сокет останавливает весь поток, пока
ожидает данных. Это препятствует организации конкурентности, потому что в каждый момент времени мы можем получать данные только от одного клиента.

2. Мы узнали, как писать приложения с неблокирующими сокетами. Их методы возвращают управление немедленно – либо в результате получения данных,
либо с исключением, если данные еще не пришли. Поэтому такие сокеты позволяют обеспечить конкурентность.

3. Мы описали, как использовать модуль selectors для эффективного прослушивания событий в  сокетах. Он позволяет зарегистрировать сокеты, за которыми мы хотим наблюдать,
и сообщает, когда в неблокирующем сокете появляются данные.

4. Поместив select в бесконечный цикл, мы заново реализуем основную часть функциональности цикла событий. Регистрируем
интересующие нас сокеты и в цикле выполняем свой код при появлении в сокете данных.

5. Мы узнали, как использовать методы цикла событий asyncio для
построения приложений с неблокирующими сокетами. Они принимают сокет и возвращают сопрограмму, которую можно затем
использовать в  выражении await. Это приостанавливает родительскую сопрограмму, до тех пор пока в сокете не появятся данные. Под капотом используется модуль selectors.

6. Мы видели, как наши задачи реализуют конкурентность асинхронного эхо-сервера, способного отправлять и принимать данные одновременно от нескольких клиентов. Также рассмотрели,
как обрабатывать ошибки в этих задачах.

7. Мы узнали, как добавить в асинхронное приложение специальную логику остановки. В нашем конкретном примере мы решили дать начатым задачам несколько секунд на завершение отправки данных.
Но никто не мешает сделать что-то другое.
